package com.example.onfit.calendar.fragment

import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.media.MediaScannerConnection
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import java.util.Calendar as JavaCalendar
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.delay
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import androidx.fragment.app.Fragment
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.PagerSnapHelper
import androidx.recyclerview.widget.RecyclerView
import com.example.onfit.KakaoLogin.util.TokenProvider
import com.example.onfit.OutfitRegister.ApiService
import com.example.onfit.OutfitRegister.RetrofitClient
import com.example.onfit.R
import com.example.onfit.calendar.adapter.CalendarAdapter
import com.example.onfit.calendar.viewmodel.CalendarViewModel
import com.example.onfit.calendar.viewmodel.CalendarUiState
import com.example.onfit.calendar.Network.CalendarService
import com.example.onfit.calendar.Network.OutfitImageResponse
import com.example.onfit.calendar.Network.MostUsedTagResponse
import com.example.onfit.network.RetrofitInstance
import com.example.onfit.Home.viewmodel.HomeViewModel
import com.google.android.material.bottomsheet.BottomSheetDialog
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.isActive
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*

class CalendarFragment : Fragment() {

    // Í∏∞Ï°¥ UI Î©§Î≤Ñ Î≥ÄÏàòÎì§
    private lateinit var rvCalendar: RecyclerView
    private lateinit var calendarAdapter: CalendarAdapter
    private lateinit var tvMostUsedStyle: TextView

    // Ïπ¥Î©îÎùº Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
    private lateinit var takePictureLauncher: ActivityResultLauncher<Uri>
    private var cameraImageUri: Uri? = null
    private var cameraImageFile: File? = null

    // Í∞§Îü¨Î¶¨ Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
    private lateinit var pickImageLauncher: ActivityResultLauncher<Intent>
    private var selectedImageUri: Uri? = null

    // MVVM
    private lateinit var viewModel: CalendarViewModel
    private lateinit var homeViewModel: HomeViewModel

    // ‚≠ê Îì±Î°ùÎêú ÎÇ†ÏßúÏôÄ outfit_id Îß§Ìïë Ï†ÄÏû•
    private var registeredDates = mutableSetOf<String>()
    private var dateToOutfitIdMap = mutableMapOf<String, Int>() // ÎÇ†Ïßú -> outfit_id Îß§Ìïë

    // ‚≠ê Ï§ëÎ≥µ Ïã§Ìñâ Î∞©ÏßÄÎ•º ÏúÑÌïú ÌîåÎûòÍ∑∏
    private var isLoadingDates = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel = ViewModelProvider(this)[CalendarViewModel::class.java]
        homeViewModel = ViewModelProvider(this)[HomeViewModel::class.java]

        // Í∞§Îü¨Î¶¨ Launcher
        pickImageLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
                if (result.resultCode == AppCompatActivity.RESULT_OK) {
                    selectedImageUri = result.data?.data

                    // ÏÑ†ÌÉù Ïù¥ÎØ∏ÏßÄ URI -> Ï∫êÏãú ÌååÏùºÎ°ú Î≥ÄÌôò ÌõÑ ÏóÖÎ°úÎìú
                    selectedImageUri?.let { uri ->
                        Log.d("CalendarFragment", "ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ URI: $uri")
                        val cacheFile = uriToCacheFile(requireContext(), uri)
                        Log.d("CalendarFragment", "ÌååÏùº Ï°¥Ïû¨ Ïó¨Î∂Ä: ${cacheFile.exists()}")
                        Log.d("CalendarFragment", "ÌååÏùº ÌÅ¨Í∏∞: ${cacheFile.length()}")
                        uploadImageToServer(cacheFile)
                    }
                }
            }

        // Ïπ¥Î©îÎùº Launcher
        takePictureLauncher = registerForActivityResult(
            ActivityResultContracts.TakePicture()
        ) { success ->
            if (success) {
                val file = cameraImageFile
                if (file != null && file.exists()) {
                    // Í∞§Îü¨Î¶¨ÏôÄ ÎèôÏùºÌïòÍ≤å ÏóÖÎ°úÎìú Ïû¨ÏÇ¨Ïö©
                    uploadImageToServer(file)
                } else {
                    Toast.makeText(requireContext(), "Ï¥¨ÏòÅ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥Ïöî.", Toast.LENGTH_SHORT).show()
                }
            } else {
                // Ï∑®ÏÜå Ïãú ÏûÑÏãúÌååÏùº Ï†ïÎ¶¨
                cameraImageFile?.takeIf { it.exists() }?.delete()
            }
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_calendar, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupViews(view)
        setupCalendar()
        setupNavigationResultListener()
        observeViewModel()

        // ‚≠ê Í∏∞Ï°¥ APIÎ•º ÌôúÏö©Ìïú Î∞©ÏãùÏúºÎ°ú Îì±Î°ùÎêú ÎÇ†Ïßú Î°úÎìú
        loadRegisteredDatesWithExistingAPI()

        // Í∞ÄÏû• ÎßéÏù¥ ÏÇ¨Ïö©Îêú ÌÉúÍ∑∏ Ï°∞Ìöå
        loadMostUsedTag()

        // ‚≠ê Ïã§Ï†ú ÏÑúÎ≤ÑÏóê Îì±Î°ùÎêú ÏΩîÎîî Î°úÎìú
        loadRealRegisteredOutfits()

        // üî• ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ï¶âÏãú Ï∂îÍ∞Ä
        addDummyDataToCalendar()

        // arguments Ï≤òÎ¶¨
        handleNavigationArguments()

    }

    private fun addDummyDataToCalendar() {
        Log.d("CalendarFragment", "üé≠ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î•º Ï∫òÎ¶∞ÎçîÏóê Ï∂îÍ∞Ä")

        // üî• JavaCalendarÎ°ú Î≥ÄÍ≤Ω
        val calendar = JavaCalendar.getInstance()
        val currentYear = calendar.get(JavaCalendar.YEAR)
        val currentMonth = calendar.get(JavaCalendar.MONTH) + 1

        // ÌïòÎìúÏΩîÎî©Îêú ÎçîÎØ∏ ÏΩîÎîî Îç∞Ïù¥ÌÑ∞ (ÌòÑÏû¨ Ïõî Í∏∞Ï§Ä)
        val dummyOutfits = mapOf(
            "$currentYear-${String.format("%02d", currentMonth)}-13" to 1001, // Ïù¥Î≤à Îã¨ 20Ïùº
            "$currentYear-${String.format("%02d", currentMonth)}-12" to 1002, // Ïù¥Î≤à Îã¨ 19Ïùº
            "$currentYear-${String.format("%02d", currentMonth)}-11" to 1003,  // Ïù¥Î≤à Îã¨ 18Ïùº
            "$currentYear-${String.format("%02d", currentMonth)}-10" to 1004,
            )

        dummyOutfits.forEach { (date, outfitId) ->
            // Îì±Î°ùÎêú ÎÇ†ÏßúÏóê Ï∂îÍ∞Ä
            registeredDates.add(date)
            dateToOutfitIdMap[date] = outfitId

            // SharedPreferencesÏóê Ï†ÄÏû•
            saveOutfitRegistration(date, outfitId)

            Log.d("CalendarFragment", "ÎçîÎØ∏ ÏΩîÎîî Ï∂îÍ∞Ä: $date -> ID: $outfitId")
        }

        // Ïñ¥ÎåëÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
        if (::calendarAdapter.isInitialized) {
            calendarAdapter.updateRegisteredDates(registeredDates)
        }

        Log.d("CalendarFragment", "‚úÖ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä ÏôÑÎ£å: ${dummyOutfits.size}Í∞ú")
    }

    private fun handleNavigationArguments() {
        arguments?.let { bundle ->
            val targetDate = bundle.getString("target_date")
            val outfitNumber = bundle.getInt("outfit_number", -1)
            val fromOutfitRecord = bundle.getBoolean("from_outfit_record", false)

            if (!targetDate.isNullOrBlank() && outfitNumber != -1 && fromOutfitRecord) {
                Log.d("CalendarFragment", "üéØ ClothesDetailÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ ÎÇ†Ïßú: $targetDate, ÏΩîÎîî: $outfitNumber")

                view?.post {
                    // Ìï¥Îãπ ÎÇ†ÏßúÎ°ú Ïä§ÌÅ¨Î°§ (Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ)
                    Toast.makeText(requireContext(), "${targetDate}Ïùò ÏΩîÎîî ${outfitNumber}Î≤à", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    override fun onResume() {
        super.onResume()
        checkForNewRegistrations()

        rvCalendar.post {
            try {
                val currentMonthIndex = 24
                (rvCalendar.layoutManager as? LinearLayoutManager)?.scrollToPositionWithOffset(
                    currentMonthIndex,
                    0
                )
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    /**
     * ‚≠ê Í∏∞Ï°¥ APIÎ•º ÌôúÏö©Ìï¥ÏÑú Îì±Î°ùÎêú ÎÇ†ÏßúÎ•º Ï∞æÎäî Î∞©Ïãù
     * SharedPreferencesÏóê Ï†ÄÏû•Îêú Îì±Î°ù Í∏∞Î°ùÏùÑ ÌôúÏö©
     */
    private fun loadRegisteredDatesWithExistingAPI() {
        if (isLoadingDates) return
        isLoadingDates = true

        Log.d("CalendarFragment", "SharedPreferencesÏóêÏÑú Îì±Î°ùÎêú ÎÇ†Ïßú Î°úÎìú")

        // SharedPreferencesÏóêÏÑú Îì±Î°ùÎêú ÏΩîÎîî Ï†ïÎ≥¥ Ï°∞Ìöå
        val prefs = requireContext().getSharedPreferences("outfit_history", Context.MODE_PRIVATE)
        val registeredOutfitsJson = prefs.getString("registered_outfits", null)

        if (!registeredOutfitsJson.isNullOrBlank()) {
            try {
                // JSON ÌååÏã±Ìï¥ÏÑú Îì±Î°ùÎêú ÎÇ†ÏßúÎì§ Ï∂îÏ∂ú
                // Ïòà: "2025-08-18:1,2025-08-17:2" ÌòïÌÉú
                val outfitEntries = registeredOutfitsJson.split(",")

                registeredDates.clear()
                dateToOutfitIdMap.clear()

                outfitEntries.forEach { entry ->
                    val parts = entry.split(":")
                    if (parts.size == 2) {
                        val date = parts[0]
                        val outfitId = parts[1].toIntOrNull() ?: 1

                        registeredDates.add(date)
                        dateToOutfitIdMap[date] = outfitId
                    }
                }

                Log.d("CalendarFragment", "Î°úÎìúÎêú Îì±Î°ù ÎÇ†Ïßú: $registeredDates")

                if (::calendarAdapter.isInitialized) {
                    calendarAdapter.updateRegisteredDates(registeredDates)
                }

            } catch (e: Exception) {
                Log.e("CalendarFragment", "Îì±Î°ù Í∏∞Î°ù ÌååÏã± Ïã§Ìå®", e)
            }
        } else {
            Log.d("CalendarFragment", "Îì±Î°ùÎêú ÏΩîÎîî ÏóÜÏùå - Îπà Ï∫òÎ¶∞Îçî ÌëúÏãú")
        }

        isLoadingDates = false
    }

    /**
     * ‚≠ê ÌäπÏ†ï outfit_idÎ°ú ÏΩîÎîî ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
     */
    private fun fetchOutfitDetails(outfitId: Int, onResult: (String?, String?) -> Unit) {
        val token = TokenProvider.getToken(requireContext())
        if (token.isBlank()) {
            Toast.makeText(requireContext(), "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
            return
        }

        viewLifecycleOwner.lifecycleScope.launch {
            try {
                val calendarService = RetrofitClient.instance.create(CalendarService::class.java)

                val response = calendarService.getOutfitText(
                    outfitId = outfitId,
                    authorization = "Bearer $token"
                )

                if (response.isSuccessful && response.body()?.result != null) {
                    val outfitDetails = response.body()?.result
                    val date = outfitDetails?.date
                    val memo = outfitDetails?.memo
                    onResult(date, memo)
                } else if (response.code() == 404) {
                    Log.e("CalendarFragment", "ÏΩîÎîî ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®: Ìï¥Îãπ OutfitÏù¥ ÏóÜÏäµÎãàÎã§.")
                    Toast.makeText(requireContext(), "Ìï¥Îãπ Outfit Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT)
                        .show()
                    onResult(null, null)
                } else {
                    Log.e("CalendarFragment", "ÏΩîÎîî ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®: code=${response.code()}")
                    Toast.makeText(requireContext(), "ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT)
                        .show()
                    onResult(null, null)
                }
            } catch (e: Exception) {
                Log.e("CalendarFragment", "ÏΩîÎîî ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïò§Î•ò", e)
                Toast.makeText(requireContext(), "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                onResult(null, null)
            }
        }
    }

    /**
     * ‚≠ê ÎÇ†Ïßú ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ - outfit_idÎ°ú ÏΩîÎîî ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ ÌõÑ ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
     */
    // üî• CalendarFragmentÏóêÏÑú Ïã§Ï†ú ID Ï∞æÎäî Î∞©Î≤ï Ï∂îÍ∞Ä

    /**
     * ÎÇ†Ïßú ÌÅ¥Î¶≠ Ïãú Ï≤òÎ¶¨ - Ïã§Ï†ú ID Ï∞æÍ∏∞ Î°úÏßÅ Ï∂îÍ∞Ä
     */
    private fun handleDateClick(dateString: String, hasOutfit: Boolean) {
        if (hasOutfit) {
            val storedOutfitId = dateToOutfitIdMap[dateString]
            Log.d("CalendarFragment", "ÎÇ†Ïßú ÌÅ¥Î¶≠: $dateString, Ï†ÄÏû•Îêú ID: $storedOutfitId")

            when {
                // 1. ÎçîÎØ∏ ÏΩîÎîî (1001~1004)
                storedOutfitId != null && isDummyOutfitId(storedOutfitId) -> {
                    Log.d("CalendarFragment", "üé≠ ÎçîÎØ∏ ÏΩîÎîî Í∞êÏßÄ")
                    navigateToDummyOutfitDetail(dateString, storedOutfitId)
                }

                // 2. Ïã§Ï†ú ÏΩîÎîî - ÌïòÏßÄÎßå ÏûÑÏãú IDÏùº Ïàò ÏûàÏùå
                storedOutfitId != null -> {
                    Log.d("CalendarFragment", "üì± Ïã§Ï†ú ÏΩîÎîî Í∞êÏßÄ - ID Ïú†Ìö®ÏÑ± ÌôïÏù∏")

                    // üî• Î®ºÏ†Ä API Ìò∏Ï∂úÌï¥ÏÑú Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏
                    fetchOutfitDetails(storedOutfitId) { fetchedDate, memo ->
                        if (!fetchedDate.isNullOrBlank()) {
                            // Ïú†Ìö®Ìïú ID - Î∞îÎ°ú Ïù¥Îèô
                            navigateToOutfitDetail(fetchedDate, storedOutfitId, memo ?: "Îì±Î°ùÎêú ÏΩîÎîîÏûÖÎãàÎã§.")
                        } else {
                            // 404 Ïò§Î•ò - Ïã§Ï†ú ID Ï∞æÍ∏∞ ÏãúÎèÑ
                            Log.w("CalendarFragment", "‚ö†Ô∏è Ï†ÄÏû•Îêú IDÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå. Ïã§Ï†ú ID Í≤ÄÏÉâ ÏãúÏûë")
                            findRealOutfitIdForDate(dateString)
                        }
                    }
                }

                else -> {
                    Log.w("CalendarFragment", "‚ö†Ô∏è Ï†ÄÏû•Îêú IDÍ∞Ä ÏóÜÏùå")
                    Toast.makeText(context, "Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            Log.d("CalendarFragment", "Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ ÎÇ†Ïßú ÌÅ¥Î¶≠: $dateString")
            showBottomSheet()
        }
    }

    /**
     * üî• NEW: HomeViewModel Îç∞Ïù¥ÌÑ∞Î°ú Ïã§Ï†ú ID Ï∞æÍ∏∞
     */
    /**
     * üî• Ïã§Ï†ú ID Ï∞æÍ∏∞ Î°úÏßÅ Í∞úÏÑ† - HomeViewModel Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
     */
    private fun findRealOutfitIdForDate(dateString: String) {
        Log.d("CalendarFragment", "üîç $dateString Ïùò Ïã§Ï†ú ID Í≤ÄÏÉâ ÏãúÏûë")

        // HomeViewModelÏóêÏÑú Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîî Ï∞æÍ∏∞
        homeViewModel.recentOutfits.value?.let { outfits ->
            val matchingOutfit = outfits.find { outfit ->
                val outfitDate = outfit.date?.take(10) // "2025-08-20T..." -> "2025-08-20"
                outfitDate == dateString
            }

            if (matchingOutfit != null) {
                Log.d("CalendarFragment", "‚úÖ HomeViewModelÏóêÏÑú Ìï¥Îãπ ÎÇ†Ïßú ÏΩîÎîî Î∞úÍ≤¨")

                // üî• Î∞©Î≤ï 1: Calendar APIÎ°ú Ïù¥ÎØ∏ÏßÄ URL Îß§Ïπ≠
                findOutfitIdByImageUrl(matchingOutfit.image ?: "", dateString)

            } else {
                Log.w("CalendarFragment", "‚ùå HomeViewModelÏóêÏÑú Ìï¥Îãπ ÎÇ†Ïßú ÏΩîÎîîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")

                // üî• Î∞©Î≤ï 2: ÏßÅÏ†ë ÎÇ†Ïßú Í∏∞Î∞òÏúºÎ°ú ÏµúÏã† ÏΩîÎîî Ï∞æÍ∏∞
                findLatestOutfitForDate(dateString)
            }
        } ?: run {
            Log.w("CalendarFragment", "‚ùå HomeViewModelÏóê ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå")
            // HomeViewModel Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥ÎèÑ ÎÇ†Ïßú Í∏∞Î∞òÏúºÎ°ú Í≤ÄÏÉâ ÏãúÎèÑ
            findLatestOutfitForDate(dateString)
        }
    }

    /**
     * üî• NEW: ÎÇ†Ïßú Ï£ºÎ≥Ä ÏµúÏã† ÏΩîÎîî Ï∞æÍ∏∞ (fallback)
     */
    private fun findLatestOutfitAroundDate(dateString: String) {
        val token = TokenProvider.getToken(requireContext())
        if (token.isBlank()) return

        Log.d("CalendarFragment", "üìÖ $dateString Ï£ºÎ≥Ä ÏµúÏã† ÏΩîÎîî Í≤ÄÏÉâ")

        viewLifecycleOwner.lifecycleScope.launch {
            try {
                val calendarService = RetrofitClient.instance.create(CalendarService::class.java)

                // ÏµúÍ∑º Îì±Î°ùÎêú ÏΩîÎîî ID Ïó≠ÏàúÏúºÎ°ú ÌôïÏù∏ (Í∞ÄÏû• ÏµúÍ∑º Í≤ÉÎ∂ÄÌÑ∞)
                for (id in 100 downTo 1) {
                    try {
                        val response = calendarService.getOutfitText(
                            outfitId = id,
                            authorization = "Bearer $token"
                        )

                        if (response.isSuccessful && response.body()?.result != null) {
                            val outfitDetails = response.body()?.result
                            val outfitDate = outfitDetails?.date?.take(10)

                            // ÎÇ†ÏßúÍ∞Ä ÏùºÏπòÌïòÍ±∞ÎÇò ÎπÑÏä∑Ìïú ÏãúÍ∏∞Ïùò ÏΩîÎîî Ï∞æÍ∏∞
                            if (outfitDate == dateString || isDateClose(outfitDate, dateString)) {
                                Log.d("CalendarFragment", "‚úÖ Ï£ºÎ≥Ä ÎÇ†Ïßú ÏΩîÎîî Î∞úÍ≤¨: ID=$id, ÎÇ†Ïßú=$outfitDate")

                                withContext(Dispatchers.Main) {
                                    // Ïã§Ï†ú IDÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                                    dateToOutfitIdMap[dateString] = id
                                    saveOutfitRegistration(dateString, id)

                                    // ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                                    navigateToOutfitDetail(outfitDate ?: dateString, id, outfitDetails?.memo ?: "Îì±Î°ùÎêú ÏΩîÎîîÏûÖÎãàÎã§.")
                                }
                                return@launch
                            }
                        }
                    } catch (e: Exception) {
                        continue
                    }
                }

                // Î™®Îì† Í≤ÄÏÉâ Ïã§Ìå®
                withContext(Dispatchers.Main) {
                    Log.w("CalendarFragment", "‚ùå Ï£ºÎ≥Ä ÎÇ†ÏßúÏóêÏÑúÎèÑ ÏΩîÎîîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                    Toast.makeText(context, "Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }

            } catch (e: Exception) {
                Log.e("CalendarFragment", "Ï£ºÎ≥Ä ÎÇ†Ïßú Í≤ÄÏÉâ Ïã§Ìå®", e)
            }
        }
    }

    /**
     * üî• NEW: Ïã§Ï†ú API Outfit ID ÌåêÎ≥Ñ Ìï®Ïàò (ÏùåÏàò ÏûÑÏãú ID)
     */
    private fun isRealApiOutfitId(outfitId: Int): Boolean {
        // Ïã§Ï†ú APIÏóêÏÑú Î∞õÏùÄ ÏΩîÎîîÎäî ÏûÑÏãúÎ°ú ÏùåÏàò ID Î∂ÄÏó¨Îê®
        return outfitId < 0
    }

    /**
     * üî• NEW: ÎçîÎØ∏ ÏΩîÎîî Î©îÎ™® Ï†ÄÏû• (ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ)
     */
    private fun saveDummyOutfitMemo(targetDate: String, outfitNumber: Int) {
        val prefs = requireContext().getSharedPreferences("outfit_memos", Context.MODE_PRIVATE)

        val dummyMemo = getDummyMemoForOutfit(outfitNumber)

        prefs.edit().putString("memo_$targetDate", dummyMemo).apply()
        Log.d("CalendarFragment", "ÎçîÎØ∏ Î©îÎ™® Ï†ÄÏû•: $targetDate -> $dummyMemo")
    }

    /**
     * üî• NEW: Ïã§Ï†ú API ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (memoÎ•º ÏÑ§Î™ÖÏúºÎ°ú Î≥ÄÍ≤Ω)
     */
    private fun navigateToRealOutfitDetail(dateString: String, imageUrl: String, description: String) {
        try {
            val bundle = Bundle().apply {
                putString("selected_date", dateString)
                putString("main_image_url", imageUrl)
                putString("memo", description) // Í≥†Ï†ïÎêú ÏÑ§Î™Ö ÏÇ¨Ïö©
                putBoolean("is_real_outfit", true) // Ïã§Ï†ú ÏΩîÎîî ÌëúÏãú

                // üî• Ïã§Ï†ú ÏΩîÎîîÎäî Í∞úÎ≥Ñ ÏïÑÏù¥ÌÖú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏúºÎØÄÎ°ú Î©îÏù∏ Ïù¥ÎØ∏ÏßÄÎßå ÌëúÏãú
                putStringArrayList("item_image_urls", arrayListOf()) // Îπà Î¶¨Ïä§Ìä∏
            }

            val navController = findNavController()
            runCatching {
                navController.navigate(R.id.action_calendarFragment_to_calendarSaveFragment, bundle)
            }.onFailure {
                runCatching {
                    navController.navigate(R.id.calendarSaveFragment, bundle)
                }.onFailure {
                    Log.e("CalendarFragment", "Ïã§Ï†ú ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°úÏùò navigation Ïã§Ìå®")
                    Toast.makeText(context, "Ïã§Ï†ú ÏΩîÎîî ($dateString)", Toast.LENGTH_LONG).show()
                }
            }

            Log.d("CalendarFragment", "‚úÖ Ïã§Ï†ú ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô: $dateString")

        } catch (e: Exception) {
            Log.e("CalendarFragment", "Ïã§Ï†ú ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ Ïù¥Îèô Ïã§Ìå®", e)
            Toast.makeText(context, "ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏùÑ Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * üî• NEW: Ïã§Ï†ú API ÏΩîÎîîÏùò ÏßÑÏßú ID Ï∞æÏïÑÏÑú Ïù¥Îèô
     */
    private fun findRealOutfitIdAndNavigate(dateString: String, tempOutfitId: Int) {
        Log.d("CalendarFragment", "Ïã§Ï†ú ÏΩîÎîî ID Í≤ÄÏÉâ ÏãúÏûë: ÏûÑÏãúID=$tempOutfitId, ÎÇ†Ïßú=$dateString")

        // HomeViewModelÏóêÏÑú Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîî Ï∞æÍ∏∞
        homeViewModel.recentOutfits.value?.let { outfits ->
            val matchingOutfit = outfits.find { outfit ->
                val outfitDate = outfit.date?.take(10) // "2025-08-18T..." -> "2025-08-18"
                outfitDate == dateString
            }

            if (matchingOutfit != null) {
                Log.d("CalendarFragment", "Îß§Ïπ≠Îêú Ïã§Ï†ú ÏΩîÎîî Î∞úÍ≤¨: ${matchingOutfit.image}")

                // üî• Ïã§Ï†ú ÏΩîÎîîÎäî Ïù¥ÎØ∏ÏßÄ URLÎßå ÏÇ¨Ïö© (Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÌïÑÎìú Ï∞∏Ï°∞ Ï†úÍ±∞)
                navigateToRealOutfitDetail(dateString, matchingOutfit.image ?: "", "Ïã§Ï†ú Îì±Î°ùÎêú ÏΩîÎîî")
            } else {
                Log.w("CalendarFragment", "Ìï¥Îãπ ÎÇ†ÏßúÏùò Ïã§Ï†ú ÏΩîÎîîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                Toast.makeText(context, "Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            }
        } ?: run {
            Log.w("CalendarFragment", "HomeViewModelÏóê ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå")
            Toast.makeText(context, "ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * ‚≠ê ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (ÎÇ†Ïßú, outfit_id, Î©îÎ™® Ï†ÑÎã¨)
     */
    private fun navigateToOutfitDetail(dateString: String, outfitId: Int, memo: String) {
        try {
            val bundle = Bundle().apply {
                putString("selected_date", dateString)
                putInt("outfit_id", outfitId)
                putString("memo", memo)
            }

            val navController = findNavController()

            runCatching {
                navController.navigate(R.id.action_calendarFragment_to_calendarSaveFragment, bundle)
            }.onFailure {
                runCatching {
                    navController.navigate(R.id.calendarSaveFragment, bundle)
                }.onFailure {
                    Log.e("CalendarFragment", "ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°úÏùò navigationÏù¥ Ï†ïÏùòÎêòÏßÄ ÏïäÏùå")
                    Toast.makeText(
                        context,
                        "$dateString ÏΩîÎîî (ID: $outfitId)\nÎ©îÎ™®: $memo",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }

        } catch (e: Exception) {
            Log.e("CalendarFragment", "ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ Ïù¥Îèô Ïã§Ìå®", e)
            Toast.makeText(context, "ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏùÑ Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * ‚≠ê HomeFragmentÏôÄ ÎèôÏùºÌïú Î∞©ÏãùÏúºÎ°ú Ïã§Ï†ú Îì±Î°ùÎêú ÏΩîÎîî Î°úÎìú
     */
    private fun loadRealRegisteredOutfits() {
        val token = TokenProvider.getToken(requireContext())
        if (token.isBlank()) return

        Log.d("RealOutfits", "HomeViewModelÏùÑ ÌÜµÌï¥ Ïã§Ï†ú ÏΩîÎîî Î°úÎìú ÏãúÏûë")

        homeViewModel.fetchRecentOutfits(token)
        homeViewModel.recentOutfits.observe(viewLifecycleOwner) { outfits ->
            val top7 = outfits?.take(7).orEmpty()

            Log.d("RealOutfits", "Î∞õÏùÄ ÏΩîÎîî Í∞úÏàò: ${top7.size}")

            top7.forEachIndexed { index, outfit ->
                val fullDate = outfit.date

                if (!fullDate.isNullOrBlank() && fullDate.length >= 10) {
                    val date = fullDate.substring(0, 10) // "2025-08-18T..." -> "2025-08-18"

                    // üî• ÏùåÏàò ÏûÑÏãú ID ÏÉùÏÑ± (Ïã§Ï†ú ÏΩîÎîî Íµ¨Î∂ÑÏö©)
                    val tempOutfitId = -(System.currentTimeMillis().toInt() + index)

                    Log.d("RealOutfits", "Ïã§Ï†ú ÏΩîÎîî: $date -> ÏûÑÏãú ID: $tempOutfitId")

                    addRegisteredDate(date, tempOutfitId)
                    saveOutfitRegistration(date, tempOutfitId)
                }
            }
        }
    }

    /**
     * ‚≠ê ÏÉàÎ°ú Îì±Î°ùÎêú ÏΩîÎîîÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÎäî Ìï®Ïàò
     */
    private fun checkForNewRegistrations() {
        val prefs =
            requireContext().getSharedPreferences("outfit_registration", Context.MODE_PRIVATE)
        val newlyRegisteredDate = prefs.getString("newly_registered_date", null)
        val newlyRegisteredId = prefs.getInt("newly_registered_outfit_id", -1)
        val timestamp = prefs.getLong("registration_timestamp", 0)

        // 5Î∂Ñ Ïù¥ÎÇ¥Ïóê Îì±Î°ùÎêú Í≤ÉÎßå Ï≤òÎ¶¨ (Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ)
        if (!newlyRegisteredDate.isNullOrBlank() &&
            System.currentTimeMillis() - timestamp < 5 * 60 * 1000
        ) {

            Log.d("CalendarFragment", "ÏÉàÎ°ú Îì±Î°ùÎêú ÏΩîÎîî Í∞êÏßÄ: $newlyRegisteredDate (ID: $newlyRegisteredId)")

            // SharedPreferences ÌÅ¥Î¶¨Ïñ¥ (Ïû¨Ï≤òÎ¶¨ Î∞©ÏßÄ)
            prefs.edit()
                .remove("newly_registered_date")
                .remove("newly_registered_outfit_id")
                .remove("registration_timestamp")
                .apply()

            // ‚≠ê ÏÉàÎ°ú Îì±Î°ùÎêú ÎÇ†Ïßú Ï¶âÏãú Ï∂îÍ∞Ä
            addRegisteredDate(newlyRegisteredDate, newlyRegisteredId)

            // ‚≠ê Îì±Î°ù Í∏∞Î°ùÏùÑ SharedPreferencesÏóê Ï†ÄÏû•
            saveOutfitRegistration(newlyRegisteredDate, newlyRegisteredId)

            Toast.makeText(requireContext(), "ÏΩîÎîîÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * ‚≠ê ÏΩîÎîî Îì±Î°ù Í∏∞Î°ùÏùÑ SharedPreferencesÏóê Ï†ÄÏû•
     */
    private fun saveOutfitRegistration(date: String, outfitId: Int) {
        val prefs = requireContext().getSharedPreferences("outfit_history", Context.MODE_PRIVATE)
        val existingData = prefs.getString("registered_outfits", "") ?: ""

        val newEntry = "$date:$outfitId"
        val updatedData = if (existingData.isBlank()) {
            newEntry
        } else {
            "$existingData,$newEntry"
        }

        prefs.edit().putString("registered_outfits", updatedData).apply()
        Log.d("CalendarFragment", "Îì±Î°ù Í∏∞Î°ù Ï†ÄÏû•: $newEntry")
    }

    /**
     * ‚≠ê ÌäπÏ†ï ÎÇ†ÏßúÏùò ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Î•º ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò (Í∏∞Ï°¥ API ÏÇ¨Ïö©)
     */
    private fun loadOutfitForDate(dateString: String) {
        val token = TokenProvider.getToken(requireContext())
        if (token.isNullOrBlank()) {
            Toast.makeText(context, "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
            return
        }

        // Ìï¥Îãπ ÎÇ†ÏßúÏùò outfit_id Ï∞æÍ∏∞
        val outfitId = dateToOutfitIdMap[dateString]
        if (outfitId == null) {
            Toast.makeText(context, "Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            return
        }

        viewLifecycleOwner.lifecycleScope.launch {
            try {
                val calendarService = RetrofitClient.instance.create(CalendarService::class.java)

                // ‚≠ê Í∏∞Ï°¥ API ÏÇ¨Ïö©: ÌäπÏ†ï outfit_idÎ°ú Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå
                val response = calendarService.getOutfitImage(
                    outfitId = outfitId,
                    authorization = "Bearer $token"
                )

                if (response.isSuccessful) {
                    val outfitData = response.body()?.result
                    if (outfitData != null && !outfitData.mainImage.isNullOrBlank()) {
                        withContext(Dispatchers.Main) {
                            // ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (outfit_idÏôÄ Ïù¥ÎØ∏ÏßÄ URL Ï†ÑÎã¨)
                            navigateToOutfitDetail(dateString, outfitId, outfitData.mainImage!!)
                        }
                    } else {
                        withContext(Dispatchers.Main) {
                            Toast.makeText(context, "Ìï¥Îãπ ÎÇ†ÏßúÏóê Îì±Î°ùÎêú ÏΩîÎîî Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT)
                                .show()
                        }
                    }
                } else {
                    withContext(Dispatchers.Main) {
                        Toast.makeText(context, "ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("CalendarFragment", "ÌäπÏ†ï ÎÇ†Ïßú ÏΩîÎîî Î°úÎìú Ïã§Ìå®", e)
                withContext(Dispatchers.Main) {
                    Toast.makeText(context, "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    /**
     * ÎÇ†ÏßúÎ•º outfit_idÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
     */
    private fun dateToOutfitId(dateString: String): Int {
        return dateToOutfitIdMap[dateString] ?: run {
            // Îß§ÌïëÏù¥ ÏóÜÏúºÎ©¥ ÎÇ†ÏßúÎ•º Ïà´ÏûêÎ°ú Î≥ÄÌôò (fallback)
            dateString.replace("-", "").toIntOrNull() ?: 1
        }
    }

    /**
     * ‚≠ê ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú ÌòÑÏû¨ ÏÉÅÌÉú Î°úÍ∑∏ Ï∂úÎ†•
     */
    private fun logCurrentState() {
        Log.d("CalendarDebug", "=== Ï∫òÎ¶∞Îçî ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ ===")
        Log.d("CalendarDebug", "Îì±Î°ùÎêú ÎÇ†Ïßú Í∞úÏàò: ${registeredDates.size}")
        Log.d("CalendarDebug", "Îì±Î°ùÎêú ÎÇ†Ïßú Î™©Î°ù: $registeredDates")
        Log.d("CalendarDebug", "ÎÇ†Ïßú-ID Îß§Ìïë: $dateToOutfitIdMap")
        Log.d("CalendarDebug", "Ïñ¥ÎåëÌÑ∞ Ï¥àÍ∏∞Ìôî Ïó¨Î∂Ä: ${::calendarAdapter.isInitialized}")
        Log.d("CalendarDebug", "========================")
    }

    // APIÏóê Í∞§Îü¨Î¶¨, Ïπ¥Î©îÎùºÏóêÏÑú Í≥†Î•∏ ÏÇ¨ÏßÑ ÏóÖÎ°úÎìúÌïòÍ≥† Url Î∞õÏïÑÏò§Í∏∞
    private fun uploadImageToServer(file: File) {
        Log.d("Calendar", "Step 1: Ìï®Ïàò ÏßÑÏûÖ")
        Log.d(
            "UploadDebug",
            "ÌååÏùº Ï°¥Ïû¨=${file.exists()}, size=${file.length()}, path=${file.absolutePath}"
        )

        // 1. ÌÜ†ÌÅ∞ Ï≤¥ÌÅ¨
        val token = TokenProvider.getToken(requireContext())
        require(!token.isNullOrBlank()) { "ÌÜ†ÌÅ∞Ïù¥ ÏóÜÎã§" }
        val header = "Bearer $token"
        Log.d("UploadDebug", "Step 2: ÌÜ†ÌÅ∞=$token")

        // 2. ÌååÏùº Í≤ÄÏ¶ù Î°úÍ∑∏
        val exists = file.exists()
        val length = file.length()
        val canRead = file.canRead()
        val ext = file.extension.lowercase()
        val bmpTest = BitmapFactory.decodeFile(file.absolutePath) != null

        Log.d(
            "UploadCheck",
            "exists=$exists, canRead=$canRead, length=$length, ext=$ext, bitmapReadable=$bmpTest"
        )

        require(exists && length > 0 && bmpTest) { "Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏù¥ ÏÜêÏÉÅÎêòÏóàÍ±∞ÎÇò ÌÅ¨Í∏∞Í∞Ä 0ÏûÖÎãàÎã§." }

        // 3. ÌôïÏû•Ïûê Í∏∞Î∞ò MIME ÏûêÎèô ÏßÄÏ†ï
        var uploadFile = file
        var uploadMime = when (ext) {
            "png" -> "image/png"
            "jpg", "jpeg" -> "image/jpeg"
            else -> "application/octet-stream"
        }

        // 3-1. PNG -> JPG Î≥ÄÌôò
        if (ext == "png") {
            try {
                val bitmap = BitmapFactory.decodeFile(file.absolutePath)
                require(bitmap != null) { "PNG ÎîîÏΩîÎî© Ïã§Ìå®" }

                val jpgFile =
                    File(requireContext().cacheDir, "upload_temp_${System.currentTimeMillis()}.jpg")
                FileOutputStream(jpgFile).use { out ->
                    bitmap.compress(Bitmap.CompressFormat.JPEG, 90, out)
                }
                uploadFile = jpgFile
                uploadMime = "image/jpeg"
                Log.d("UploadDebug", "PNG ‚Üí JPG Î≥ÄÌôò ÏôÑÎ£å: ${jpgFile.absolutePath}")
            } catch (e: Exception) {
                Log.e("UploadDebug", "PNG ‚Üí JPG Î≥ÄÌôò Ïã§Ìå®", e)
                uploadFile = file
                uploadMime = "image/png"
            }
        }

        // 4. RequestBody + MultipartBody.Part ÏÉùÏÑ±
        val requestFile = uploadFile.asRequestBody(uploadMime.toMediaTypeOrNull())
        val body = MultipartBody.Part.createFormData("image", uploadFile.name, requestFile)

        // 6. ÏóÖÎ°úÎìú Ïã§Ìñâ
        viewLifecycleOwner.lifecycleScope.launch(Dispatchers.IO) {
            try {
                val api = RetrofitClient.instance.create(ApiService::class.java)
                val response = api.uploadImage(header, body)

                val bodyObj = response.body()

                withContext(Dispatchers.Main) {
                    if (response.isSuccessful && bodyObj?.ok == true) {
                        val imageUrl = bodyObj.payload?.imageUrl

                        if (imageUrl.isNullOrBlank()) {
                            Toast.makeText(
                                requireContext(),
                                "Ïù¥ÎØ∏ÏßÄ URLÏùÑ Î∞õÏßÄ Î™ªÌñàÏñ¥Ïöî.",
                                Toast.LENGTH_SHORT
                            ).show()
                            return@withContext
                        }

                        // RegisterFragmentÎ°ú URL Ï†ÑÎã¨
                        val bundle = Bundle().apply {
                            putString("selectedImagePath", uploadFile.absolutePath)
                            putString("uploadedImageUrl", imageUrl)
                        }

                        if (!isAdded || !viewLifecycleOwner.lifecycle.currentState.isAtLeast(
                                Lifecycle.State.STARTED
                            )
                        ) {
                            return@withContext
                        }

                        if (!isAdded || !viewLifecycleOwner.lifecycle.currentState.isAtLeast(
                                Lifecycle.State.STARTED
                            )
                        ) return@withContext
                        val nav = findNavController()

                        // Ïï°ÏÖòÏúºÎ°ú ÏãúÎèÑ
                        runCatching {
                            nav.navigate(R.id.action_calendarFragment_to_registerFragment, bundle)
                        }.onFailure {
                            runCatching {
                                nav.navigate(R.id.registerFragment, bundle)
                            }
                        }
                    } else {
                        val errorMsg = response.errorBody()?.string()
                        Log.e(
                            "HomeFragment",
                            "ÏóÖÎ°úÎìú Ïã§Ìå®: code=${response.code()}, error=$errorMsg, body=$bodyObj"
                        )
                        Toast.makeText(
                            requireContext(),
                            bodyObj?.message ?: "ÏóÖÎ°úÎìú Ïã§Ìå®",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    Toast.makeText(requireContext(), "ÏÑúÎ≤Ñ Ïò§Î•ò", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun setupViews(view: View) {
        rvCalendar = view.findViewById(R.id.rvCalendar)
        tvMostUsedStyle = view.findViewById(R.id.tvMostUsedStyle)

        tvMostUsedStyle.text = "#Ìè¨Î©Ä Ïä§ÌÉÄÏùºÏù¥ Í∞ÄÏû• ÎßéÏïòÏñ¥Ïöî!"

        view.findViewById<View>(R.id.btnStyleOutfits)?.setOnClickListener {
            navigateToStyleOutfits()
        }

        view.findViewById<View>(R.id.calendar_register_btn)?.setOnClickListener {
            try {
                showBottomSheet()
            } catch (e: Exception) {
                e.printStackTrace()
                Toast.makeText(requireContext(), "Ïù¥Îèô Ïã§Ìå®: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun setupCalendar() {
        val months = generateMonths()

        calendarAdapter = CalendarAdapter(
            months = months,
            registeredDates = registeredDates,
            onDateClick = { dateString, hasOutfit ->
                handleDateClick(dateString, hasOutfit)
            }
        )

        rvCalendar.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = calendarAdapter
            PagerSnapHelper().attachToRecyclerView(this)
        }

        scrollToCurrentMonth()
    }

    private fun loadMostUsedTag() {
        viewModel.loadMostUsedTag()
    }

    private fun observeViewModel() {
        lifecycleScope.launch {
            viewModel.uiState.collect { state ->
                updateTagUI(state)
            }
        }
    }

    private fun updateTagUI(state: CalendarUiState) {
        when {
            state.isTagLoading -> {
                tvMostUsedStyle.text = "Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë..."
            }

            state.mostUsedTag != null -> {
                val tag = state.mostUsedTag
                tvMostUsedStyle.text = "#${tag.tag} Ïä§ÌÉÄÏùºÏù¥ Í∞ÄÏû• ÎßéÏïòÏñ¥Ïöî! (${tag.count}Í∞ú)"
            }

            state.tagErrorMessage != null -> {
                tvMostUsedStyle.text = "#Ìè¨Î©Ä Ïä§ÌÉÄÏùºÏù¥ Í∞ÄÏû• ÎßéÏïòÏñ¥Ïöî!"
                viewModel.clearTagError()
            }

            else -> {
                tvMostUsedStyle.text = "#Ìè¨Î©Ä Ïä§ÌÉÄÏùºÏù¥ Í∞ÄÏû• ÎßéÏïòÏñ¥Ïöî!"
            }
        }
    }

    private fun generateMonths(): List<MonthData> {
        val months = mutableListOf<MonthData>()
        val calendar = JavaCalendar.getInstance()

        calendar.add(JavaCalendar.MONTH, -24)

        repeat(37) {
            val year = calendar.get(JavaCalendar.YEAR)
            val month = calendar.get(JavaCalendar.MONTH) + 1
            val monthData = MonthData(year, month)
            months.add(monthData)
            calendar.add(JavaCalendar.MONTH, 1)
        }

        return months
    }

    private fun scrollToCurrentMonth() {
        val currentMonthIndex = 24
        rvCalendar.post {
            rvCalendar.postDelayed({
                try {
                    (rvCalendar.layoutManager as? LinearLayoutManager)?.scrollToPositionWithOffset(
                        currentMonthIndex,
                        0
                    )
                } catch (e: Exception) {
                    rvCalendar.scrollToPosition(currentMonthIndex)
                }
            }, 100)
        }
    }

    private fun navigateToOutfitRegister(dateString: String) {
        val action =
            CalendarFragmentDirections.actionCalendarFragmentToCalendarSaveFragment(dateString)
        findNavController().navigate(action)
    }

    private fun navigateToStyleOutfits() {
        try {
            val navController = findNavController()
            val targetDestination = navController.graph.findNode(R.id.styleOutfitsFragment)

            if (targetDestination != null) {
                navController.navigate(R.id.styleOutfitsFragment)
            } else {
                Toast.makeText(
                    requireContext(),
                    "StyleOutfitsFragmentÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.",
                    Toast.LENGTH_SHORT
                ).show()
            }

        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(requireContext(), "Navigation Ïò§Î•ò: ${e.message}", Toast.LENGTH_LONG)
                .show()
        }
    }

    // bottom sheet
    private fun showBottomSheet() {
        val view = layoutInflater.inflate(R.layout.bottom_sheet_dialog, null)
        val dialog = BottomSheetDialog(requireContext())
        dialog.setContentView(view)

        // Ïπ¥Î©îÎùº Î≤ÑÌäº
        view.findViewById<LinearLayout>(R.id.camera_btn).setOnClickListener {
            ensureCameraPermission {
                openCamera()
                dialog.dismiss()
            }
        }
        // Í∞§Îü¨Î¶¨ Î≤ÑÌäº
        view.findViewById<LinearLayout>(R.id.gallery_btn).setOnClickListener {
            ensurePhotoPermission { rescanPicturesAndOpenGallery() }
            dialog.dismiss()
        }
        dialog.show()
    }

    private fun uriToCacheFile(context: Context, uri: Uri): File {
        val inputStream = context.contentResolver.openInputStream(uri)
        val file = File(context.cacheDir, "selected_outfit.png")
        val outputStream = FileOutputStream(file)
        inputStream?.use { input ->
            outputStream.use { output -> input.copyTo(output) }
        }
        return file
    }


    // Ïπ¥Î©îÎùº Í∂åÌïú
    private fun ensureCameraPermission(onGranted: () -> Unit) {
        val perm = android.Manifest.permission.CAMERA
        if (ContextCompat.checkSelfPermission(requireContext(), perm) ==
            PackageManager.PERMISSION_GRANTED
        ) {
            onGranted()
        } else {
            // Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•ÌïòÍ≤å RequestPermission launcher ÌïòÎÇò Îçî Ïç®ÎèÑ ÎêòÍ≥†,
            // Ïó¨Í∏∞ÏÑ† Í∞ÑÎã®Ìûà ÏûÑÏãúÎ°ú Îü∞Ï≤ò ÏÉùÏÑ±
            registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
                if (granted) onGranted() else
                    Toast.makeText(requireContext(), "Ïπ¥Î©îÎùº Í∂åÌïúÏù¥ ÌïÑÏöîÌï¥Ïöî", Toast.LENGTH_SHORT).show()
            }.launch(perm)
        }
    }

    // Ïπ¥Î©îÎùº Ïó¥Í∏∞
    private fun openCamera() {
        try {
            val (file, uri) = createCameraOutput(requireContext()) // ‚Üê ÏßÄÏó≠ val
            cameraImageFile = file
            cameraImageUri = uri
            takePictureLauncher.launch(uri) // ÏßÄÏó≠ valÏùÄ non-null
        } catch (e: Exception) {
            Toast.makeText(requireContext(), "Ïπ¥Î©îÎùº Ïã§Ìñâ Ïã§Ìå®: ${e.message}", Toast.LENGTH_SHORT)
                .show()
        }
    }

    private fun createCameraOutput(ctx: Context): Pair<File, Uri> {
        val baseDir = ctx.getExternalFilesDir(Environment.DIRECTORY_PICTURES) ?: ctx.cacheDir
        val outDir = File(baseDir, "camera").apply { mkdirs() }
        val file = File(outDir, "camera_${System.currentTimeMillis()}.jpg")
        val uri = FileProvider.getUriForFile(ctx, "${ctx.packageName}.fileprovider", file)
        return file to uri
    }

    // Í∞§Îü¨Î¶¨ Í∂åÌïú
    private fun ensurePhotoPermission(onGranted: () -> Unit) {
        val perm = if (Build.VERSION.SDK_INT >= 33)
            android.Manifest.permission.READ_MEDIA_IMAGES
        else
            android.Manifest.permission.READ_EXTERNAL_STORAGE

        if (ContextCompat.checkSelfPermission(requireContext(), perm) ==
            PackageManager.PERMISSION_GRANTED
        ) {
            onGranted()
        } else {
            requestPermissionLauncher.launch(perm)
        }
    }

    // Í∂åÌïú ÌóàÏö© Ïãú Í∞§Îü¨Î¶¨ Ïó¥Í∏∞
    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            if (granted) {
                rescanPicturesAndOpenGallery()
            } else {
                Toast.makeText(requireContext(), "ÏÇ¨ÏßÑ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï¥Ïöî", Toast.LENGTH_SHORT).show()
            }
        }


    // Pictures Ìè¥Îçî Ïä§Ï∫î
    private fun rescanPicturesAndOpenGallery() {
        val picturesPath = Environment.getExternalStoragePublicDirectory(
            Environment.DIRECTORY_PICTURES
        ).absolutePath

        MediaScannerConnection.scanFile(
            requireContext(),
            arrayOf(picturesPath),
            null
        ) { _, _ ->
            requireActivity().runOnUiThread { openGallery() }
        }
    }

    // Í∞§Îü¨Î¶¨ Ïó¥Í∏∞
    private fun openGallery() {
        val intent = Intent(Intent.ACTION_PICK).apply { type = "image/*" }
        pickImageLauncher.launch(intent)
    }

    /**
     * Ïô∏Î∂ÄÏóêÏÑú ÌÉúÍ∑∏ ÌÜµÍ≥Ñ ÏÉàÎ°úÍ≥†Ïπ®
     */
    fun refreshMostUsedTag() {
        loadMostUsedTag()
    }

    private fun loadOutfitDataInBackground(dateString: String) {
        viewModel.onDateSelected(dateString)
    }

    // üî• NEW: ClothesDetailFragmentÏóêÏÑú Ìò∏Ï∂úÎêòÎäî Ìï®Ïàò - CalendarFragmentÏóê Ï∂îÍ∞Ä
    fun navigateToCalendarWithOutfit(outfitNumber: Int) {
        try {
            // üî• ÌïòÎìúÏΩîÎî©Îêú ÏΩîÎîîÎ≥Ñ Îì±Î°ù ÎÇ†Ïßú
            val outfitDateMap = mapOf(
                1 to "2024-08-13", // cody1 -> 8/13
                2 to "2024-08-12", // cody2 -> 8/12
                3 to "2024-08-11", // cody3 -> 8/11
                4 to "2024-08-10"  // cody4 -> 8/10
            )

            val targetDate = outfitDateMap[outfitNumber]

            if (targetDate != null) {
                Log.d("CalendarFragment", "üóìÔ∏è Ïô∏Î∂ÄÏóêÏÑú ÏΩîÎîî ${outfitNumber}Î≤à ÏöîÏ≤≠ -> ${targetDate}Î°ú Ïù¥Îèô")

                // üî• ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (Ïã§Ï†ú Ï∫òÎ¶∞ÎçîÏóê ÌëúÏãúÎêòÎèÑÎ°ù)
                addDummyOutfitData(targetDate, outfitNumber)

                // üî• Ìï¥Îãπ ÎÇ†ÏßúÎ°ú Ï∫òÎ¶∞Îçî Ïä§ÌÅ¨Î°§
                scrollToSpecificDate(targetDate)

                Toast.makeText(requireContext(), "ÏΩîÎîî ${outfitNumber}Î≤àÏù¥ Îì±Î°ùÎêú ${targetDate}Î°ú Ïù¥ÎèôÌï©ÎãàÎã§", Toast.LENGTH_SHORT).show()

            } else {
                Log.e("CalendarFragment", "‚ùå ÏΩîÎîî ${outfitNumber}Î≤àÏùò ÎÇ†Ïßú Ï†ïÎ≥¥ ÏóÜÏùå")
                Toast.makeText(requireContext(), "Ìï¥Îãπ ÏΩîÎîîÏùò Îì±Î°ù ÎÇ†ÏßúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
            }

        } catch (e: Exception) {
            Log.e("CalendarFragment", "üí• Ï∫òÎ¶∞Îçî Ïù¥Îèô Ïã§Ìå®", e)
            Toast.makeText(requireContext(), "Ï∫òÎ¶∞ÎçîÎ°ú Ïù¥ÎèôÌï† Ïàò ÏóÜÏäµÎãàÎã§: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }

    // üî• NEW: ÎçîÎØ∏ ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Î•º Ï∫òÎ¶∞ÎçîÏóê Ï∂îÍ∞Ä
    private fun addDummyOutfitData(targetDate: String, outfitNumber: Int) {
        // ÏûÑÏãú outfit_id ÏÉùÏÑ± (ÏΩîÎîî Î≤àÌò∏ Í∏∞Î∞ò)
        val dummyOutfitId = 1000 + outfitNumber

        Log.d("CalendarFragment", "ÎçîÎØ∏ ÏΩîÎîî Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä: $targetDate -> ÎçîÎØ∏ ID: $dummyOutfitId")

        // Îì±Î°ùÎêú ÎÇ†ÏßúÏóê Ï∂îÍ∞Ä
        addRegisteredDate(targetDate, dummyOutfitId)

        // SharedPreferencesÏóê Ï†ÄÏû•
        saveOutfitRegistration(targetDate, dummyOutfitId)

        // ÎçîÎØ∏ Î©îÎ™® Îç∞Ïù¥ÌÑ∞ÎèÑ Ï∂îÍ∞Ä
        saveDummyOutfitMemo(targetDate, outfitNumber)
    }

    // üî• NEW: ÌäπÏ†ï ÎÇ†ÏßúÎ°ú Ï∫òÎ¶∞Îçî Ïä§ÌÅ¨Î°§
    private fun scrollToSpecificDate(targetDate: String) {
        try {
            // targetDate: "2024-08-13" ÌòïÏãù
            val dateParts = targetDate.split("-")
            val year = dateParts[0].toInt()
            val month = dateParts[1].toInt()

            // ÌòÑÏû¨ Ï∫òÎ¶∞ÎçîÏùò Í∏∞Ï§ÄÏ†ê (2023ÎÖÑ 1ÏõîÎ∂ÄÌÑ∞ ÏãúÏûëÌïúÎã§Í≥† Í∞ÄÏ†ï)
            val baseYear = 2023
            val baseMonth = 1

            // Ìï¥Îãπ ÎÇ†ÏßúÏùò Ïõî Ïù∏Îç±Ïä§ Í≥ÑÏÇ∞
            val targetMonthIndex = (year - baseYear) * 12 + (month - baseMonth)

            Log.d("CalendarFragment", "ÎÇ†Ïßú Ïä§ÌÅ¨Î°§: $targetDate -> Ïõî Ïù∏Îç±Ïä§: $targetMonthIndex")

            // Ï∫òÎ¶∞ÎçîÎ•º Ìï¥Îãπ ÏõîÎ°ú Ïä§ÌÅ¨Î°§
            rvCalendar.post {
                try {
                    (rvCalendar.layoutManager as? LinearLayoutManager)?.scrollToPositionWithOffset(
                        targetMonthIndex,
                        0
                    )

                    // Ïû†Ïãú ÌõÑ Ìï¥Îãπ ÎÇ†Ïßú Í∞ïÏ°∞ ÌëúÏãú
                    rvCalendar.postDelayed({
                        highlightSpecificDate(targetDate)
                    }, 500)

                } catch (e: Exception) {
                    Log.e("CalendarFragment", "Ïä§ÌÅ¨Î°§ Ïã§Ìå®", e)
                    rvCalendar.scrollToPosition(targetMonthIndex.coerceAtLeast(0))
                }
            }

        } catch (e: Exception) {
            Log.e("CalendarFragment", "ÎÇ†Ïßú ÌååÏã± Ïã§Ìå®", e)
            Toast.makeText(requireContext(), "ÎÇ†Ïßú ÌòïÏãù Ïò§Î•ò", Toast.LENGTH_SHORT).show()
        }
    }

    // üî• NEW: ÌäπÏ†ï ÎÇ†Ïßú Í∞ïÏ°∞ ÌëúÏãú (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    private fun highlightSpecificDate(targetDate: String) {
        // Ïñ¥ÎåëÌÑ∞Ïóê ÌäπÏ†ï ÎÇ†Ïßú Í∞ïÏ°∞ Í∏∞Îä•Ïù¥ ÏûàÎã§Î©¥ Ìò∏Ï∂ú
        if (::calendarAdapter.isInitialized) {
            // calendarAdapter.highlightDate(targetDate) // Íµ¨ÌòÑÎêòÏñ¥ ÏûàÎã§Î©¥
            Log.d("CalendarFragment", "ÎÇ†Ïßú Í∞ïÏ°∞: $targetDate")
        }
    }


    /**
     * üî• ÎçîÎØ∏ ÏΩîÎîî ÌåêÎ≥Ñ (1001~1004Îßå ÎçîÎØ∏Î°ú Ïù∏Ïãù)
     */
    private fun isDummyOutfitId(outfitId: Int): Boolean {
        return outfitId in 1001..1004
    }

    /**
     * üî• ÎçîÎØ∏ ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (Í∏∞Ï°¥ ÏΩîÎìú Ïú†ÏßÄ)
     */
    private fun navigateToDummyOutfitDetail(dateString: String, dummyOutfitId: Int) {
        try {
            val outfitNumber = dummyOutfitId - 1000

            Log.d("CalendarFragment", "üé≠ ÎçîÎØ∏ ÏΩîÎîî ÏÉÅÏÑ∏ Ïù¥Îèô: ÎÇ†Ïßú=$dateString, Î≤àÌò∏=$outfitNumber")

            val bundle = Bundle().apply {
                putString("selected_date", dateString)
                putInt("outfit_id", dummyOutfitId)
                putInt("outfit_number", outfitNumber)
                putBoolean("from_outfit_record", true)
                putBoolean("is_dummy_outfit", true)
                putString("memo", getDummyMemoForOutfit(outfitNumber))
            }

            val navController = findNavController()
            runCatching {
                navController.navigate(R.id.action_calendarFragment_to_calendarSaveFragment, bundle)
            }.onFailure {
                runCatching {
                    navController.navigate(R.id.calendarSaveFragment, bundle)
                }.onFailure {
                    Log.e("CalendarFragment", "ÎçîÎØ∏ ÏΩîÎîî navigation Ïã§Ìå®")
                    val fallbackDescription = getDummyMemoForOutfit(outfitNumber)
                    Toast.makeText(context, "ÎçîÎØ∏ ÏΩîÎîî $outfitNumber Î≤à ($dateString)\n$fallbackDescription", Toast.LENGTH_LONG).show()
                }
            }

        } catch (e: Exception) {
            Log.e("CalendarFragment", "ÎçîÎØ∏ ÏΩîÎîî Ïù¥Îèô Ïã§Ìå®", e)
            Toast.makeText(context, "ÏΩîÎîî ÏÉÅÏÑ∏ ÌôîÎ©¥ÏùÑ Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * üî• HomeViewModelÏóêÏÑú Í≤ÄÏÉâ (Community API Ïã§Ìå® Ïãú fallback)
     */
    private fun searchInHomeViewModel(dateString: String) {
        Log.d("CalendarFragment", "üè† HomeViewModelÏóêÏÑú $dateString ÏΩîÎîî Í≤ÄÏÉâ")

        homeViewModel.recentOutfits.value?.let { outfits ->
            Log.d("CalendarFragment", "HomeViewModelÏóê ${outfits.size}Í∞ú ÏΩîÎîî ÏûàÏùå")

            val matchingOutfit = outfits.find { outfit ->
                val outfitDate = outfit.date?.take(10)
                Log.d("CalendarFragment", "HomeViewModel ÏΩîÎîî ÎÇ†Ïßú ÎπÑÍµê: $outfitDate vs $dateString")
                outfitDate == dateString
            }

            if (matchingOutfit != null) {
                Log.d("CalendarFragment", "‚úÖ HomeViewModelÏóêÏÑú ÏΩîÎîî Î∞úÍ≤¨: ${matchingOutfit.image}")

                // Ïù¥ÎØ∏ÏßÄ URLÎ°ú Community APIÏóêÏÑú Ïã§Ï†ú ID Ï∞æÍ∏∞
                findOutfitIdByImageUrl(matchingOutfit.image ?: "", dateString)
            } else {
                Log.w("CalendarFragment", "‚ùå HomeViewModelÏóêÏÑúÎèÑ ÏΩîÎîîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                showNotFoundMessage(dateString)
            }
        } ?: run {
            Log.w("CalendarFragment", "‚ùå HomeViewModelÏóê ÏΩîÎîî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå")
            showNotFoundMessage(dateString)
        }
    }

    /**
     * üî• Ïù¥ÎØ∏ÏßÄ URLÎ°ú Ïã§Ï†ú outfit_id Ï∞æÍ∏∞
     */
    private fun findOutfitIdByImageUrl(imageUrl: String, dateString: String) {
        val token = TokenProvider.getToken(requireContext())
        if (token.isBlank()) {
            Toast.makeText(requireContext(), "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
            return
        }

        Log.d("CalendarFragment", "üñºÔ∏è Î≥ëÎ†¨ Í≤ÄÏÉâ ÏãúÏûë: $imageUrl")

        viewLifecycleOwner.lifecycleScope.launch {
            try {
                val calendarService = RetrofitClient.instance.create(CalendarService::class.java)

                // üî• Î≥ëÎ†¨ Ï≤òÎ¶¨: 10Í∞úÏî© Î¨∂Ïñ¥ÏÑú ÎèôÏãú Ïã§Ìñâ
                val ranges = listOf(
                    (100 downTo 91),  // ÏµúÏã† 10Í∞ú
                    (90 downTo 81),
                    (80 downTo 71),
                    (70 downTo 61),
                    (60 downTo 51),
                    (50 downTo 41),
                    (40 downTo 31),
                    (30 downTo 21),
                    (20 downTo 11),
                    (10 downTo 1)     // Í∞ÄÏû• Ïò§ÎûòÎêú 10Í∞ú
                )

                for (range in ranges) {
                    Log.d("CalendarFragment", "Í≤ÄÏÉâ Î≤îÏúÑ: ${range.first}~${range.last}")

                    val deferredResults = range.map { id ->
                        async(Dispatchers.IO) {
                            try {
                                val response = calendarService.getOutfitImage(
                                    outfitId = id,
                                    authorization = "Bearer $token"
                                )

                                if (response.isSuccessful) {
                                    val outfitData = response.body()?.result
                                    if (outfitData?.mainImage == imageUrl) {
                                        return@async id // Ï∞æÏïòÏùå!
                                    }
                                }
                                return@async null
                            } catch (e: Exception) {
                                return@async null
                            }
                        }
                    }

                    // Î≥ëÎ†¨ Ïã§Ìñâ Í≤∞Í≥º Í∏∞Îã§Î¶¨Í∏∞
                    val results = deferredResults.awaitAll()
                    val foundId = results.firstOrNull { it != null }

                    if (foundId != null) {
                        Log.d("CalendarFragment", "‚úÖ Î≥ëÎ†¨ Í≤ÄÏÉâÏúºÎ°ú ID Î∞úÍ≤¨: $foundId")

                        withContext(Dispatchers.Main) {
                            // Ïã§Ï†ú IDÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                            dateToOutfitIdMap[dateString] = foundId
                            saveOutfitRegistration(dateString, foundId)

                            // ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå ÌõÑ Ïù¥Îèô
                            fetchOutfitDetails(foundId) { fetchedDate, memo ->
                                navigateToOutfitDetail(
                                    fetchedDate ?: dateString,
                                    foundId,
                                    memo ?: "Îì±Î°ùÎêú ÏΩîÎîîÏûÖÎãàÎã§."
                                )
                            }
                        }
                        return@launch
                    }

                    // Í∞Å Î≤îÏúÑ ÏôÑÎ£å ÌõÑ Ïû†Íπê ÎåÄÍ∏∞ (ÏÑúÎ≤Ñ Î∂ÄÌïò Î∞©ÏßÄ)
                    delay(100)
                }

                // Î™®Îì† Î≥ëÎ†¨ Í≤ÄÏÉâ Ïã§Ìå® - Îπ†Î•∏ ÎÇ†Ïßú Í≤ÄÏÉâ
                withContext(Dispatchers.Main) {
                    Log.w("CalendarFragment", "‚ùå Î≥ëÎ†¨ Ïù¥ÎØ∏ÏßÄ Í≤ÄÏÉâ Ïã§Ìå® - Îπ†Î•∏ ÎÇ†Ïßú Í≤ÄÏÉâ")
                    findLatestOutfitFast(dateString)
                }

            } catch (e: Exception) {
                Log.e("CalendarFragment", "Î≥ëÎ†¨ Í≤ÄÏÉâ Ïã§Ìå®", e)
                withContext(Dispatchers.Main) {
                    findLatestOutfitFast(dateString)
                }
            }
        }
    }

    private fun findLatestOutfitFast(dateString: String) {
        val token = TokenProvider.getToken(requireContext())
        if (token.isBlank()) return

        Log.d("CalendarFragment", "üìÖ Îπ†Î•∏ ÎÇ†Ïßú Í≤ÄÏÉâ: $dateString")

        viewLifecycleOwner.lifecycleScope.launch {
            try {
                val calendarService = RetrofitClient.instance.create(CalendarService::class.java)

                // üî• ÏµúÏã† 20Í∞úÎßå Îπ†Î•¥Í≤å ÌôïÏù∏ (Í∞ÄÏû• Í∞ÄÎä•ÏÑ± ÎÜíÏùÄ Î≤îÏúÑ)
                val recentIds = (50 downTo 31).toList()

                val deferredResults = recentIds.map { id ->
                    async(Dispatchers.IO) {
                        try {
                            val response = calendarService.getOutfitText(
                                outfitId = id,
                                authorization = "Bearer $token"
                            )

                            if (response.isSuccessful && response.body()?.result != null) {
                                val outfitDetails = response.body()?.result
                                val outfitDate = outfitDetails?.date?.take(10)

                                if (outfitDate == dateString) {
                                    return@async Pair(id, outfitDetails)
                                }
                            }
                            return@async null
                        } catch (e: Exception) {
                            return@async null
                        }
                    }
                }

                // Î≥ëÎ†¨ Ïã§Ìñâ
                val results = deferredResults.awaitAll()
                val found = results.firstOrNull { it != null }

                if (found != null) {
                    val (foundId, outfitDetails) = found
                    Log.d("CalendarFragment", "‚úÖ Îπ†Î•∏ ÎÇ†Ïßú Í≤ÄÏÉâÏúºÎ°ú Î∞úÍ≤¨: ID=$foundId")

                    withContext(Dispatchers.Main) {
                        // Ïã§Ï†ú IDÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                        dateToOutfitIdMap[dateString] = foundId
                        saveOutfitRegistration(dateString, foundId)

                        // ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                        navigateToOutfitDetail(
                            outfitDetails.date?.take(10) ?: dateString,
                            foundId,
                            outfitDetails.memo ?: "Îì±Î°ùÎêú ÏΩîÎîîÏûÖÎãàÎã§."
                        )
                    }
                } else {
                    withContext(Dispatchers.Main) {
                        Log.w("CalendarFragment", "‚ùå Îπ†Î•∏ Í≤ÄÏÉâÎèÑ Ïã§Ìå® - ÏûÑÏãú Î∑∞ ÏÉùÏÑ±")
                        createTemporaryOutfitView(dateString)
                    }
                }

            } catch (e: Exception) {
                Log.e("CalendarFragment", "Îπ†Î•∏ Í≤ÄÏÉâ Ïã§Ìå®", e)
                withContext(Dispatchers.Main) {
                    createTemporaryOutfitView(dateString)
                }
            }
        }
    }

    /**
     * üî• ÏûÑÏãú Î∞©Ìé∏: Í≤ÄÏÉâ Ïã§Ìå® Ïãú ÏûÑÏãú ÏΩîÎîî Î∑∞ ÏÉùÏÑ±
     */
    private fun createTemporaryOutfitView(dateString: String) {
        Log.d("CalendarFragment", "üö® ÏûÑÏãú Î∑∞: $dateString")

        // HomeViewModelÏóêÏÑú Ïù¥ÎØ∏ÏßÄÎßå Í∞ÄÏ†∏ÏôÄÏÑú Í∞ÑÎã®Ìûà ÌëúÏãú
        homeViewModel.recentOutfits.value?.find {
            it.date?.take(10) == dateString
        }?.let { outfit ->

            val bundle = Bundle().apply {
                putString("selected_date", dateString)
                putString("main_image_url", outfit.image)
                putString("memo", "Îì±Î°ùÎêú ÏΩîÎîîÏûÖÎãàÎã§.")
                putBoolean("is_temporary_view", true)
            }

            runCatching {
                findNavController().navigate(R.id.action_calendarFragment_to_calendarSaveFragment, bundle)
            }.onFailure {
                runCatching {
                    findNavController().navigate(R.id.calendarSaveFragment, bundle)
                }.onFailure {
                    Toast.makeText(context, "$dateString ÏΩîÎîî Ï†ïÎ≥¥", Toast.LENGTH_SHORT).show()
                }
            }

        } ?: Toast.makeText(context, "Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
    }

    private fun findLatestOutfitForDate(dateString: String) {
        val token = TokenProvider.getToken(requireContext())
        if (token.isBlank()) return

        Log.d("CalendarFragment", "üìÖ $dateString ÏµúÏã† ÏΩîÎîî Í≤ÄÏÉâ")

        viewLifecycleOwner.lifecycleScope.launch {
            try {
                val calendarService = RetrofitClient.instance.create(CalendarService::class.java)

                // üî• ÏµúÍ∑º 30Í∞ú ÏΩîÎîîÎ•º ÌôïÏù∏Ìï¥ÏÑú ÎÇ†ÏßúÍ∞Ä ÏùºÏπòÌïòÎäî Í≤É Ï∞æÍ∏∞
                for (id in 30 downTo 1) {
                    try {
                        val response = calendarService.getOutfitText(
                            outfitId = id,
                            authorization = "Bearer $token"
                        )

                        if (response.isSuccessful && response.body()?.result != null) {
                            val outfitDetails = response.body()?.result
                            val outfitDate = outfitDetails?.date?.take(10)

                            Log.d("CalendarFragment", "ID $id ÎÇ†Ïßú ÌôïÏù∏: $outfitDate vs $dateString")

                            // ÎÇ†ÏßúÍ∞Ä Ï†ïÌôïÌûà ÏùºÏπòÌïòÎäî ÏΩîÎîî Ï∞æÍ∏∞
                            if (outfitDate == dateString) {
                                Log.d("CalendarFragment", "‚úÖ ÎÇ†Ïßú ÏùºÏπòÌïòÎäî ÏΩîÎîî Î∞úÍ≤¨: ID=$id")

                                withContext(Dispatchers.Main) {
                                    // Ïã§Ï†ú IDÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                                    dateToOutfitIdMap[dateString] = id
                                    saveOutfitRegistration(dateString, id)

                                    Log.d("CalendarFragment", "üîÑ ÏµúÏã† ÏΩîÎîîÎ°ú ÏóÖÎç∞Ïù¥Ìä∏: $dateString -> $id")

                                    // ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                                    navigateToOutfitDetail(
                                        outfitDate,
                                        id,
                                        outfitDetails?.memo ?: "Îì±Î°ùÎêú ÏΩîÎîîÏûÖÎãàÎã§."
                                    )
                                }
                                return@launch
                            }
                        }
                    } catch (e: Exception) {
                        Log.d("CalendarFragment", "ID $id ÌÖçÏä§Ìä∏ Ï°∞Ìöå Ïã§Ìå®: ${e.message}")
                        continue
                    }
                }

                // Î™®Îì† Í≤ÄÏÉâ Ïã§Ìå®
                withContext(Dispatchers.Main) {
                    Log.w("CalendarFragment", "‚ùå Î™®Îì† Î∞©Î≤ïÏúºÎ°ú Ïã§Ï†ú IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                    Toast.makeText(
                        context,
                        "Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏΩîÎîî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.\nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
                        Toast.LENGTH_LONG
                    ).show()
                }

            } catch (e: Exception) {
                Log.e("CalendarFragment", "ÏµúÏã† ÏΩîÎîî Í≤ÄÏÉâ Ïã§Ìå®", e)
                withContext(Dispatchers.Main) {
                    Toast.makeText(context, "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    /**
     * üî• Í∞ÑÎã®Ìïú ÎÇ†Ïßú Í∑ºÏ†ëÏÑ± ÌôïÏù∏ (Í∏∞Ï°¥ ÏΩîÎìúÏóêÏÑú ÏÇ¨Ïö© Ïïà Ìï®)
     */
    private fun isDateClose(date1: String?, date2: String?): Boolean {
        if (date1.isNullOrBlank() || date2.isNullOrBlank()) return false

        return try {
            val sdf = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
            val d1 = sdf.parse(date1)?.time ?: 0
            val d2 = sdf.parse(date2)?.time ?: 0

            // 1Ïùº Ïù¥ÎÇ¥Î©¥ Í∑ºÏ†ëÌïú Í≤ÉÏúºÎ°ú ÌåêÎã®
            Math.abs(d1 - d2) <= 24 * 60 * 60 * 1000
        } catch (e: Exception) {
            false
        }
    }

    /**
     * üî• Ïã§Ï†ú outfit_idÎ°ú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå ÌõÑ Ïù¥Îèô
     */
    private fun fetchOutfitDetailsAndNavigate(realOutfitId: Int, dateString: String) {
        Log.d("CalendarFragment", "üìã Ïã§Ï†ú ÏΩîÎîî ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå: ID=$realOutfitId")

        fetchOutfitDetails(realOutfitId) { fetchedDate, memo ->
            if (!fetchedDate.isNullOrBlank() && !memo.isNullOrBlank()) {
                Log.d("CalendarFragment", "‚úÖ Ïã§Ï†ú ÏΩîÎîî ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ")
                navigateToOutfitDetail(fetchedDate, realOutfitId, memo)
            } else {
                Log.w("CalendarFragment", "‚ö†Ô∏è Ïã§Ï†ú ÏΩîÎîî ÏÉÅÏÑ∏ Ï†ïÎ≥¥Í∞Ä ÎπÑÏñ¥ÏûàÏùå")
                // Îπà Î©îÎ™®ÎùºÎèÑ Ïù¥ÎèôÏùÄ Í∞ÄÎä•ÌïòÎèÑÎ°ù
                navigateToOutfitDetail(dateString, realOutfitId, "Îì±Î°ùÎêú ÏΩîÎîîÏûÖÎãàÎã§.")
            }
        }
    }

    /**
     * üî• ÏΩîÎîîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùÑ Îïå Î©îÏãúÏßÄ
     */
    private fun showNotFoundMessage(dateString: String) {
        Toast.makeText(
            requireContext(),
            "Ìï¥Îãπ ÎÇ†Ïßú($dateString)Ïùò ÏΩîÎîî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.\nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
            Toast.LENGTH_LONG
        ).show()
    }

    /**
     * üî• ÎçîÎØ∏ ÏΩîÎîîÎ≥Ñ Î©îÎ™® Î∞òÌôò (Í∏∞Ï°¥ ÏΩîÎìú Ïú†ÏßÄ)
     */
    private fun getDummyMemoForOutfit(outfitNumber: Int): String {
        return when (outfitNumber) {
            1 -> "ÌôîÏù¥Ìä∏ ÏÖîÏ∏†ÏôÄ Î≤†Ïù¥ÏßÄ Ìå¨Ï∏†Î°ú ÍπîÎÅîÌïú Ïò§ÌîºÏä§ Î£© (8Ïõî 13Ïùº)"
            2 -> "Î∏îÎûô Î∞òÌåîÍ≥º Î≤†Ïù¥ÏßÄ Î∞òÎ∞îÏßÄÎ°ú ÏãúÏõêÌïú Ïó¨Î¶Ñ ÏΩîÎîî (8Ïõî 12Ïùº)"
            3 -> "Î∏îÎûô ÏÖîÏ∏†ÏôÄ ÌôîÏù¥Ìä∏ Ïã†Î∞úÎ°ú Î™®ÎçòÌïòÍ≥† ÏÑ∏Î†®Îêú Ïä§ÌÉÄÏùº (8Ïõî 11Ïùº)"
            4 -> "Í∑∏Î†àÏù¥ ÏÖîÏ∏†ÏôÄ Î∏îÎûô Ìå¨Ï∏†Î°ú ÎØ∏ÎãàÎ©ÄÌïú Îç∞ÏùºÎ¶¨ ÏΩîÎîî (8Ïõî 10Ïùº)"
            else -> "Ïä§ÌÉÄÏùºÎ¶¨ÏãúÌïú Îç∞ÏùºÎ¶¨ ÏΩîÎîî"
        }
    }

    /**
     * üî• ÏàòÏ†ïÎêú Navigation Í≤∞Í≥º ÏàòÏã† ÏÑ§Ï†ï
     */
    private fun setupNavigationResultListener() {
        // Fragment Result Î∞©Ïãù
        parentFragmentManager.setFragmentResultListener("outfit_registered", this) { _, bundle ->
            val registeredDate = bundle.getString("registered_date")
            val success = bundle.getBoolean("success", false)
            val realOutfitId = bundle.getInt("real_outfit_id", -1) // üî• Ïã§Ï†ú ÏÑúÎ≤Ñ ID

            if (success && !registeredDate.isNullOrBlank()) {
                Log.d("CalendarFragment", "Fragment Í≤∞Í≥ºÎ°ú Îì±Î°ùÎêú ÎÇ†Ïßú ÏàòÏã†: $registeredDate, Ïã§Ï†ú ID: $realOutfitId")

                // üî• Ïã§Ï†ú IDÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ Î∞©ÏãùÎåÄÎ°ú ÏûÑÏãú ID
                val outfitId = if (realOutfitId > 0) {
                    realOutfitId
                } else {
                    System.currentTimeMillis().toInt() % 100000
                }

                addRegisteredDate(registeredDate, outfitId)
                saveOutfitRegistration(registeredDate, outfitId)

                Toast.makeText(requireContext(), "ÏΩîÎîîÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!", Toast.LENGTH_SHORT).show()
            }
        }

        // Í∏∞Ï°¥ Navigation Î∞©ÏãùÎèÑ Ïú†ÏßÄ
        findNavController().currentBackStackEntry?.savedStateHandle?.getLiveData<String>("registered_date")
            ?.observe(viewLifecycleOwner) { registeredDate ->
                if (!registeredDate.isNullOrBlank()) {
                    Log.d("CalendarFragment", "Navigation Í≤∞Í≥ºÎ°ú Îì±Î°ùÎêú ÎÇ†Ïßú ÏàòÏã†: $registeredDate")

                    // üî• Ïã§Ï†ú IDÎèÑ Î∞õÍ∏∞ ÏãúÎèÑ
                    val handle = findNavController().currentBackStackEntry?.savedStateHandle
                    val realOutfitId = handle?.get<Int>("real_outfit_id") ?: -1

                    val outfitId = if (realOutfitId > 0) {
                        realOutfitId
                    } else {
                        System.currentTimeMillis().toInt() % 100000
                    }

                    addRegisteredDate(registeredDate, outfitId)
                    saveOutfitRegistration(registeredDate, outfitId)

                    Toast.makeText(requireContext(), "ÏΩîÎîîÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!", Toast.LENGTH_SHORT).show()

                    findNavController().currentBackStackEntry?.savedStateHandle?.remove<String>("registered_date")
                    findNavController().currentBackStackEntry?.savedStateHandle?.remove<Int>("real_outfit_id")
                }
            }
    }

    fun addRegisteredDate(dateString: String, outfitId: Int = -1) {
        val wasAdded = registeredDates.add(dateString)
        Log.d("CalendarDebug", "ÎÇ†Ïßú Ï∂îÍ∞Ä ÏãúÎèÑ: $dateString, Ïã§Ï†ú Ï∂îÍ∞ÄÎê®: $wasAdded, outfit_id: $outfitId")

        if (outfitId != -1) {
            val existingId = dateToOutfitIdMap[dateString]

            // üî• ÎçîÎØ∏ ÏΩîÎîîÎäî Ïã§Ï†ú ÏΩîÎîîÎ°ú ÎçÆÏñ¥Ïì∞ÏßÄ ÏïäÎèÑÎ°ù Î≥¥Ìò∏
            val shouldUpdate = when {
                existingId == null -> true // Í∏∞Ï°¥ IDÍ∞Ä ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
                isDummyOutfitId(existingId) && !isDummyOutfitId(outfitId) -> false // ÎçîÎØ∏ -> Ïã§Ï†ú Î≥ÄÍ≤Ω Î∞©ÏßÄ
                !isDummyOutfitId(existingId) && isDummyOutfitId(outfitId) -> false // Ïã§Ï†ú -> ÎçîÎØ∏ Î≥ÄÍ≤Ω Î∞©ÏßÄ
                existingId == outfitId -> false // Í∞ôÏùÄ IDÎ©¥ Ïä§ÌÇµ
                else -> true // Í∑∏ Ïô∏Îäî ÏóÖÎç∞Ïù¥Ìä∏
            }

            if (shouldUpdate) {
                Log.d("CalendarDebug", "ID ÏóÖÎç∞Ïù¥Ìä∏: $dateString -> $outfitId")
                dateToOutfitIdMap[dateString] = outfitId
            } else {
                Log.d("CalendarDebug", "ID ÏóÖÎç∞Ïù¥Ìä∏ Ïä§ÌÇµ: $dateString -> Í∏∞Ï°¥ $existingId Ïú†ÏßÄ")
            }
        }

        if (::calendarAdapter.isInitialized) {
            calendarAdapter.updateRegisteredDates(registeredDates)
        }

        logCurrentState()
    }
}

data class MonthData(
    val year: Int,
    val month: Int
)