package com.example.onfit.calendar.fragment

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.PagerSnapHelper
import androidx.recyclerview.widget.RecyclerView
import com.example.onfit.R
import com.example.onfit.calendar.adapter.CalendarAdapter
import com.example.onfit.calendar.viewmodel.CalendarViewModel
import com.example.onfit.calendar.viewmodel.CalendarUiState
import com.example.onfit.calendar.Network.*
import kotlinx.coroutines.launch
import java.util.*

class CalendarFragment : Fragment() {

    // Í∏∞Ï°¥ UI Î©§Î≤Ñ Î≥ÄÏàòÎì§
    private lateinit var rvCalendar: RecyclerView
    private lateinit var calendarAdapter: CalendarAdapter
    private lateinit var tvMostUsedStyle: TextView

    // MVVM
    private lateinit var viewModel: CalendarViewModel

    // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Îì§
    private val outfitRegisteredDates = setOf(
        "2025-04-03", "2025-04-04", "2025-04-05", "2025-04-06", "2025-04-07",
        "2025-04-08", "2025-04-09", "2025-04-10", "2025-04-11", "2025-04-12",
        "2025-04-13", "2025-04-14", "2025-04-15", "2025-04-16", "2025-04-17",
        "2025-04-18", "2025-04-19", "2025-04-20", "2025-04-21", "2025-04-22",
        "2025-04-23", "2025-04-24", "2025-04-25", "2025-04-26", "2025-04-27",
        "2025-04-28", "2025-04-29",
        "2025-07-03", "2025-07-04", "2025-07-05", "2025-07-06", "2025-07-07",
        "2025-07-08", "2025-07-09", "2025-07-10", "2025-07-11", "2025-07-12",
        "2025-07-13", "2025-07-14", "2025-07-15", "2025-07-16", "2025-07-17",
        "2025-07-18", "2025-07-19", "2025-07-20", "2025-07-21", "2025-07-22",
        "2025-07-23", "2025-07-24", "2025-07-25", "2025-07-26", "2025-07-27",
        "2025-07-28", "2025-07-29"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel = ViewModelProvider(this)[CalendarViewModel::class.java]
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_calendar, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupViews(view)
        setupCalendar()
        observeViewModel()

        // üî• ÏÉà APIÎ°ú Í∞ÄÏû• ÎßéÏù¥ ÏÇ¨Ïö©Îêú ÌÉúÍ∑∏ Ï°∞Ìöå
        loadMostUsedTag()
    }

    override fun onResume() {
        super.onResume()
        rvCalendar.post {
            try {
                val currentMonthIndex = 24
                (rvCalendar.layoutManager as? LinearLayoutManager)?.scrollToPositionWithOffset(currentMonthIndex, 0)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    private fun setupViews(view: View) {
        rvCalendar = view.findViewById(R.id.rvCalendar)
        tvMostUsedStyle = view.findViewById(R.id.tvMostUsedStyle)

        view.findViewById<View>(R.id.btnStyleOutfits)?.setOnClickListener {
            navigateToStyleOutfits()
        }

        view.findViewById<View>(R.id.calendar_register_btn)?.setOnClickListener {
            try {
                findNavController().navigate(R.id.action_calendarFragment_to_registerFragment)
            } catch (e: Exception) {
                e.printStackTrace()
                Toast.makeText(requireContext(), "Ïù¥Îèô Ïã§Ìå®: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun setupCalendar() {
        val months = generateMonths()

        calendarAdapter = CalendarAdapter(
            months = months,
            registeredDates = outfitRegisteredDates,
            onDateClick = { dateString, hasOutfit ->
                handleDateClick(dateString, hasOutfit)
            }
        )

        rvCalendar.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = calendarAdapter
            PagerSnapHelper().attachToRecyclerView(this)
        }

        scrollToCurrentMonth()
    }

    /**
     * APIÎ°ú Í∞ÄÏû• ÎßéÏù¥ ÏÇ¨Ïö©Îêú ÌÉúÍ∑∏ Ï°∞Ìöå
     */
    private fun loadMostUsedTag() {
        viewModel.loadMostUsedTag()
    }

    /**
     * ViewModel ÏÉÅÌÉú Í¥ÄÏ∞∞
     */
    private fun observeViewModel() {
        lifecycleScope.launch {
            viewModel.uiState.collect { state ->
                // Í∏∞Ï°¥ ÏΩîÎîî Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
                handleOutfitData(state)

                // ÏÉàÎ°ú Ï∂îÍ∞Ä: ÌÉúÍ∑∏ ÌÜµÍ≥Ñ UI ÏóÖÎç∞Ïù¥Ìä∏
                updateTagUI(state)
            }
        }
    }

    /**
     * Í∏∞Ï°¥ ÏΩîÎîî Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
     */
    private fun handleOutfitData(state: CalendarUiState) {
        when {
            state.isLoading -> {
                // Î°úÎî© Ï§ë
            }
            state.hasOutfitData -> {
                state.outfitImage?.let { image ->
                    println("Calendar API - Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: ${image.mainImage}")
                }
                state.outfitText?.let { text ->
                    println("Calendar API - ÌÖçÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: ${text.memo}")
                }
            }
            state.errorMessage != null -> {
                Toast.makeText(context, "ÏΩîÎîî Îç∞Ïù¥ÌÑ∞: ${state.errorMessage}", Toast.LENGTH_SHORT).show()
                viewModel.clearErrorMessage()
            }
        }
    }

    /**
     * ÌÉúÍ∑∏ UI ÏóÖÎç∞Ïù¥Ìä∏
     */
    private fun updateTagUI(state: CalendarUiState) {
        when {
            state.isTagLoading -> {
                // ÌÉúÍ∑∏ Î°úÎî© Ï§ë
                tvMostUsedStyle.text = "Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë..."
            }
            state.mostUsedTag != null -> {
                // üî• Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞Î°ú ÏóÖÎç∞Ïù¥Ìä∏
                val tag = state.mostUsedTag
                tvMostUsedStyle.text = "#${tag.tag} Ïä§ÌÉÄÏùºÏù¥ Í∞ÄÏû• ÎßéÏïòÏñ¥Ïöî! (${tag.count}Í∞ú)"
            }
            state.tagErrorMessage != null -> {
                // ÏóêÎü¨ Ïãú Í∏∞Î≥∏Í∞í
                tvMostUsedStyle.text = "#Ìè¨Î©Ä Ïä§ÌÉÄÏùºÏù¥ Í∞ÄÏû• ÎßéÏïòÏñ¥Ïöî!"

                // ÏóêÎü¨ Î©îÏãúÏßÄ ÏûêÎèô Ï†úÍ±∞
                viewModel.clearTagError()
            }
            else -> {
                // Ï¥àÍ∏∞ ÏÉÅÌÉú
                tvMostUsedStyle.text = "#Ìè¨Î©Ä Ïä§ÌÉÄÏùºÏù¥ Í∞ÄÏû• ÎßéÏïòÏñ¥Ïöî!"
            }
        }
    }

    private fun generateMonths(): List<MonthData> {
        val months = mutableListOf<MonthData>()
        val calendar = Calendar.getInstance()

        calendar.add(Calendar.MONTH, -24)

        repeat(37) {
            val year = calendar.get(Calendar.YEAR)
            val month = calendar.get(Calendar.MONTH) + 1
            val monthData = MonthData(year, month)
            months.add(monthData)
            calendar.add(Calendar.MONTH, 1)
        }

        return months
    }

    private fun scrollToCurrentMonth() {
        val currentMonthIndex = 24
        rvCalendar.post {
            rvCalendar.postDelayed({
                try {
                    (rvCalendar.layoutManager as? LinearLayoutManager)?.scrollToPositionWithOffset(currentMonthIndex, 0)
                } catch (e: Exception) {
                    rvCalendar.scrollToPosition(currentMonthIndex)
                }
            }, 100)
        }
    }

    private fun handleDateClick(dateString: String, hasOutfit: Boolean) {
        if (hasOutfit) {
            loadOutfitDataInBackground(dateString)
            navigateToOutfitDetail(dateString)
        } else {
            navigateToOutfitRegister(dateString)
        }
    }

    private fun loadOutfitDataInBackground(dateString: String) {
        val outfitId = getOutfitIdFromDate(dateString)
        viewModel.onDateSelected(outfitId)
    }

    private fun getOutfitIdFromDate(dateString: String): Int {
        return dateString.hashCode().let { if (it < 0) -it else it } % 100 + 1
    }

    private fun navigateToOutfitDetail(dateString: String) {
        Toast.makeText(context, "ÏΩîÎîî ÏÉÅÏÑ∏: $dateString", Toast.LENGTH_SHORT).show()
    }

    private fun navigateToOutfitRegister(dateString: String) {
        val action = CalendarFragmentDirections.actionCalendarFragmentToCalendarSaveFragment(dateString)
        findNavController().navigate(action)
    }

    private fun navigateToStyleOutfits() {
        try {
            val navController = findNavController()
            val targetDestination = navController.graph.findNode(R.id.styleOutfitsFragment)

            if (targetDestination != null) {
                navController.navigate(R.id.styleOutfitsFragment)
            } else {
                Toast.makeText(requireContext(), "StyleOutfitsFragmentÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            }

        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(requireContext(), "Navigation Ïò§Î•ò: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    /**
     * Ïô∏Î∂ÄÏóêÏÑú ÌÉúÍ∑∏ ÌÜµÍ≥Ñ ÏÉàÎ°úÍ≥†Ïπ®
     */
    fun refreshMostUsedTag() {
        loadMostUsedTag()
    }
}

data class MonthData(
    val year: Int,
    val month: Int
)